########## String Literals ###########
str0: " "
str1: ""
######################################
########## Dispatch Vectors ##########
_DV_Quicksort: [_Quicksort_partition,_Quicksort_quicksort,_Quicksort_initArray,_Quicksort_printArray]
#####################################

#partition in Quicksort
_Quicksort_partition:
Move this,R0
MoveField R0.1,R1
Move low23,R2
MoveArray R1[R2],R3
Move R3,pivot25
Move low23,R3
Move R3,i26
Move high24,R3
Move R3,j27

#While at 11
_loop0:
Move 1,R3
Compare 0,R3
JumpTrue _end0

#While at 12
_loop1:

#Logical Binary Op at line 12
Move this,R4
MoveField R4.1,R5
Move i26,R0
MoveArray R5[R0],R6
Move pivot25,R7
Compare R6,R7
JumpLE _cond0
Move 1,R7
Jump _end2
_cond0:
Move 0,R7
_end2:
Compare 0,R7
JumpTrue _end1

#Assignment on line 12

#Math binary operation '+' at line 12
Move i26,R6
Move 1,R8
Add R8,R6
Move R6,i26
Jump _loop1
_end1:

#While at 13
_loop2:

#Logical Binary Op at line 13
Move this,R0
MoveField R0.1,R4
Move j27,R5
MoveArray R4[R5],R6
Move pivot25,R8
Compare R6,R8
JumpGE _cond1
Move 1,R8
Jump _end4
_cond1:
Move 0,R8
_end4:
Compare 0,R8
JumpTrue _end3

#Assignment on line 13

#Math binary operation '-' at line 13
Move j27,R6
Move 1,R9
Sub R9,R6
Move R6,j27
Jump _loop2
_end3:

#If at line 15

#Logical Binary Op at line 15
Move i26,R0
Move j27,R4
Compare R0,R4
JumpG _cond2
Move 1,R4
Jump _end5
_cond2:
Move 0,R4
_end5:
Compare 0,R4
JumpTrue _end6
_cond3:
Jump _end0
_end6:

#Assignment on line 17
Move this,R0
MoveField R0.1,R5
Move i26,R6
MoveArray R5[R6],R9
Move R9,tmp28

#Assignment on line 18
Move this,R0
MoveField R0.1,R5
Move j27,R6
MoveArray R5[R6],R9
Move this,R10
MoveField R10.1,R11
Move i26,R0
MoveArray R9,R11[R0]

#Assignment on line 19
Move tmp28,R0
Move this,R9
MoveField R9.1,R10
Move j27,R11
MoveArray R0,R10[R11]

#Assignment on line 20

#Math binary operation '+' at line 20
Move i26,R0
Move 1,R9
Add R9,R0
Move R0,i26

#Assignment on line 21

#Math binary operation '-' at line 21
Move j27,R0
Move 1,R9
Sub R9,R0
Move R0,j27
Jump _loop0
_end0:
Move j27,R0
Return R0
Return 9999

##############################

#quicksort in Quicksort
_Quicksort_quicksort:

#If at line 28

#Logical Binary Op at line 28
Move low29,R0
Move high30,R9
Compare R0,R9
JumpLE _cond4
Move 1,R9
Jump _end7
_cond4:
Move 0,R9
_end7:
Compare 0,R9
JumpTrue _end8
_cond5:

#Virtual Call partition at line 29
Move this,R0
Move low29,R10
Move high30,R11
VirtualCall R0.0(low23=R10,high24=R11),R12
Move R12,mid31

#Virtual Call quicksort at line 30
Move this,R12
Move low29,R13
Move mid31,R14
VirtualCall R12.1(low29=R13,high30=R14),Rdummy

#Virtual Call quicksort at line 31
Move this,R15

#Math binary operation '+' at line 31
Move mid31,R16
Move 1,R17
Add R17,R16
Move high30,R17
VirtualCall R15.1(low29=R16,high30=R17),Rdummy
_end8:
Return 9999

##############################

#initArray in Quicksort
_Quicksort_initArray:
Move 0,R18
Move R18,i32

#While at 37
_loop3:

#Logical Binary Op at line 37
Move i32,R18
Move this,R19
MoveField R19.1,R20
ArrayLength R20,R21
Compare R18,R21
JumpLE _cond6
Move 1,R21
Jump _end10
_cond6:
Move 0,R21
_end10:
Compare 0,R21
JumpTrue _end9

#Assignment on line 38

#Math binary operation '%' at line 38

#Math binary operation '*' at line 38
Move this,R18
MoveField R18.1,R20
ArrayLength R20,R19
Move 2,R20
Mul R20,R19

#Library call random at line 38
Library __random(),R20
Mod R19,R20
Move this,R19
MoveField R19.1,R22
Move i32,R18
MoveArray R20,R22[R18]

#Assignment on line 39

#Math binary operation '+' at line 39
Move i32,R18
Move 1,R19
Add R19,R18
Move R18,i32
Jump _loop3
_end9:
Return 9999

##############################

#printArray in Quicksort
_Quicksort_printArray:
Move 0,R18
Move R18,i33

#While at 46
_loop4:

#Logical Binary Op at line 46
Move i33,R18
Move this,R19
MoveField R19.1,R20
ArrayLength R20,R22
Compare R18,R22
JumpLE _cond7
Move 1,R22
Jump _end12
_cond7:
Move 0,R22
_end12:
Compare 0,R22
JumpTrue _end11

#Library call printi at line 47
Move this,R18
MoveField R18.1,R20
Move i33,R19
MoveArray R20[R19],R23
Library __printi(R23),Rdummy

#Library call print at line 48
Move str0,R23
Library __print(R23),Rdummy

#Assignment on line 49

#Math binary operation '+' at line 49
Move i33,R23
Move 1,R24
Add R24,R23
Move R23,i33
Jump _loop4
_end11:
Return 9999

##############################

#main in Quicksort
_ic_main:
Move 10,R18
Move R18,n35

#New Class Quicksort at line 58
Library __allocateObject(8),R18
MoveField _DV_Quicksort,R18.0
Move R18,s36

#Assignment on line 59
Move n35,R18
Mul 4,R18
Library __allocateArray(R18),R19
Move s36,R18
MoveField R19,R18.1

#Assignment on line 61
Move 0,R18
Sub 3,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[0]

#Assignment on line 62
Move 10,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[1]

#Assignment on line 63
Move 4,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[2]

#Assignment on line 64
Move 0,R18
Sub 9,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[3]

#Assignment on line 65
Move 13,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[4]

#Assignment on line 66
Move 1,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[5]

#Assignment on line 67
Move 3,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[6]

#Assignment on line 68
Move 13,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[7]

#Assignment on line 69
Move 13,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[8]

#Assignment on line 70
Move 0,R18
Sub 6,R18
Move s36,R19
MoveField R19.1,R20
MoveArray R18,R20[9]

#Virtual Call printArray at line 72
Move s36,R18
VirtualCall R18.3(),Rdummy

#Library call println at line 73
Move str1,R19
Library __println(R19),Rdummy

#Virtual Call quicksort at line 74
Move s36,R19

#Math binary operation '-' at line 74
Move n35,R20
Move 1,R23
Sub R23,R20
VirtualCall R19.1(low29=0,high30=R20),Rdummy

#Virtual Call printArray at line 75
Move s36,R23
VirtualCall R23.3(),Rdummy
Library __exit(0),Rdummy

##############################
