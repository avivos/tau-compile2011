/* The following code was generated by JFlex 1.4.3 on 09:53 08/11/10 */

package IC.Parser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09:53 08/11/10 from the specification file
 * <tt>src/IC/Parser/IC.lex</tt>
 */
public @SuppressWarnings(value={"all"}) class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_LINE_COMMENTS = 2;
  public static final int QUOTE = 6;
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\25\2\0\1\6\22\0\1\10\1\47\1\12\2\7"+
    "\1\43\1\50\1\7\1\30\1\31\1\26\1\42\1\36\1\41\1\44"+
    "\1\27\1\1\1\2\1\16\1\15\1\20\1\17\1\24\1\23\1\22"+
    "\1\21\1\7\1\37\1\46\1\40\1\45\2\7\32\4\1\34\1\11"+
    "\1\35\1\7\1\5\1\7\1\55\1\52\1\57\1\63\1\54\1\67"+
    "\1\73\1\72\1\64\1\3\1\56\1\60\1\3\1\14\1\65\2\3"+
    "\1\53\1\61\1\13\1\66\1\70\1\71\1\62\2\3\1\32\1\51"+
    "\1\33\1\7\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\3\2\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\1\12\3\1\32\1\5"+
    "\1\33\1\34\1\33\1\35\1\36\4\3\2\2\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\12\3"+
    "\1\47\5\3\1\50\1\3\2\2\12\3\1\51\3\3"+
    "\1\52\1\53\1\54\2\2\3\3\1\55\10\3\1\56"+
    "\1\3\2\2\1\57\3\3\1\60\5\3\1\61\1\62"+
    "\2\2\1\3\1\63\2\3\1\64\1\65\1\66\1\3"+
    "\2\2\1\67\1\70\1\3\1\71\2\2\1\72\2\2"+
    "\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\360\0\360\0\360\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\360\0\u030c\0\360\0\360\0\360\0\360\0\360\0\360"+
    "\0\360\0\360\0\u0348\0\360\0\360\0\360\0\360\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\360\0\u0708"+
    "\0\360\0\360\0\u0744\0\360\0\u012c\0\u0780\0\u07bc\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\360\0\360\0\360\0\360\0\360"+
    "\0\360\0\360\0\360\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u01a4\0\u0b40\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u01a4\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u01a4\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u01a4\0\u1374"+
    "\0\u13b0\0\u13ec\0\u01a4\0\u1428\0\u1464\0\u14a0\0\u01a4\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u01a4\0\u01a4\0\u1608\0\u1644"+
    "\0\u1680\0\u01a4\0\u16bc\0\u16f8\0\u01a4\0\u01a4\0\u01a4\0\u1734"+
    "\0\u1770\0\u17ac\0\u01a4\0\u01a4\0\u17e8\0\u01a4\0\u1824\0\u1860"+
    "\0\u01a4\0\u189c\0\u18d8\0\u189c\0\u189c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\5"+
    "\1\13\1\5\1\14\1\15\1\16\1\17\1\20\6\17"+
    "\1\12\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\10\1\50\1\51\1\52\2\10\1\53\2\10\1\54"+
    "\1\55\1\56\2\10\25\12\1\57\74\12\1\60\45\12"+
    "\1\61\10\62\1\63\1\64\61\62\75\0\5\65\5\0"+
    "\12\65\25\0\22\65\1\0\2\17\3\65\5\0\2\65"+
    "\10\17\25\0\22\65\1\0\5\10\5\0\12\10\25\0"+
    "\22\10\1\0\5\11\5\0\12\11\25\0\22\11\1\0"+
    "\5\10\5\0\12\10\25\0\1\10\1\66\16\10\1\67"+
    "\1\10\1\0\5\10\5\0\12\10\25\0\2\10\1\70"+
    "\11\10\1\71\5\10\1\0\2\72\3\65\5\0\2\65"+
    "\10\72\25\0\22\65\1\0\1\17\1\73\3\65\5\0"+
    "\2\65\10\72\25\0\22\65\26\0\1\74\1\75\104\0"+
    "\1\76\73\0\1\77\73\0\1\100\73\0\1\101\103\0"+
    "\1\102\74\0\1\103\23\0\5\10\5\0\12\10\25\0"+
    "\1\10\1\104\11\10\1\105\6\10\1\0\5\10\5\0"+
    "\12\10\25\0\2\10\1\106\17\10\1\0\5\10\5\0"+
    "\12\10\25\0\6\10\1\107\1\10\1\110\11\10\1\0"+
    "\5\10\5\0\12\10\25\0\6\10\1\111\4\10\1\112"+
    "\6\10\1\0\5\10\5\0\12\10\25\0\2\10\1\113"+
    "\17\10\1\0\5\10\5\0\1\114\11\10\25\0\22\10"+
    "\1\0\5\10\5\0\1\10\1\115\10\10\25\0\15\10"+
    "\1\116\4\10\1\0\5\10\5\0\12\10\25\0\3\10"+
    "\1\117\16\10\1\0\5\10\5\0\12\10\25\0\13\10"+
    "\1\120\6\10\1\0\5\10\5\0\12\10\25\0\20\10"+
    "\1\121\1\10\27\0\1\57\55\0\4\62\60\0\5\10"+
    "\5\0\12\10\25\0\14\10\1\122\5\10\1\0\5\10"+
    "\5\0\12\10\25\0\12\10\1\123\7\10\1\0\5\10"+
    "\5\0\12\10\25\0\17\10\1\124\2\10\1\0\5\10"+
    "\5\0\12\10\25\0\6\10\1\125\13\10\1\0\2\126"+
    "\3\65\5\0\2\65\10\126\25\0\22\65\1\0\2\72"+
    "\3\65\5\0\2\65\2\72\1\126\1\127\1\72\3\126"+
    "\25\0\22\65\1\0\5\10\5\0\12\10\25\0\2\10"+
    "\1\130\17\10\1\0\5\10\5\0\12\10\25\0\13\10"+
    "\1\131\6\10\1\0\5\10\5\0\1\132\11\10\25\0"+
    "\22\10\1\0\5\10\5\0\12\10\25\0\7\10\1\133"+
    "\12\10\1\0\5\10\5\0\1\134\11\10\25\0\22\10"+
    "\1\0\5\10\5\0\12\10\25\0\3\10\1\135\16\10"+
    "\1\0\5\10\5\0\1\10\1\136\10\10\25\0\22\10"+
    "\1\0\5\10\5\0\1\10\1\137\10\10\25\0\22\10"+
    "\1\0\5\10\5\0\12\10\25\0\1\10\1\140\1\10"+
    "\1\141\16\10\1\0\5\10\5\0\1\142\11\10\25\0"+
    "\22\10\1\0\5\10\5\0\12\10\25\0\6\10\1\143"+
    "\13\10\1\0\5\10\5\0\12\10\25\0\12\10\1\144"+
    "\7\10\1\0\5\10\5\0\12\10\25\0\12\10\1\145"+
    "\7\10\1\0\5\10\5\0\12\10\25\0\2\10\1\146"+
    "\17\10\1\0\5\10\5\0\12\10\25\0\7\10\1\147"+
    "\12\10\1\0\5\10\5\0\12\10\25\0\6\10\1\150"+
    "\13\10\1\0\2\151\3\65\5\0\2\65\10\151\25\0"+
    "\22\65\1\0\2\126\3\65\5\0\2\65\4\126\2\151"+
    "\1\152\1\126\25\0\22\65\1\0\5\10\5\0\12\10"+
    "\25\0\3\10\1\153\16\10\1\0\5\10\5\0\12\10"+
    "\25\0\6\10\1\154\13\10\1\0\5\10\5\0\12\10"+
    "\25\0\14\10\1\155\5\10\1\0\5\10\5\0\12\10"+
    "\25\0\2\10\1\156\17\10\1\0\5\10\5\0\12\10"+
    "\25\0\2\10\1\157\17\10\1\0\5\10\5\0\12\10"+
    "\25\0\7\10\1\160\12\10\1\0\5\10\5\0\1\161"+
    "\11\10\25\0\22\10\1\0\5\10\5\0\12\10\25\0"+
    "\21\10\1\162\1\0\5\10\5\0\12\10\25\0\12\10"+
    "\1\163\7\10\1\0\5\10\5\0\1\164\11\10\25\0"+
    "\22\10\1\0\5\10\5\0\12\10\25\0\2\10\1\165"+
    "\17\10\1\0\5\10\5\0\12\10\25\0\7\10\1\166"+
    "\12\10\1\0\5\10\5\0\12\10\25\0\11\10\1\167"+
    "\10\10\1\0\5\10\5\0\12\10\25\0\6\10\1\170"+
    "\13\10\1\0\2\171\3\65\5\0\2\65\10\171\25\0"+
    "\22\65\1\0\2\151\3\65\5\0\2\65\2\151\1\171"+
    "\1\172\4\171\25\0\22\65\1\0\5\10\5\0\12\10"+
    "\25\0\4\10\1\173\15\10\1\0\5\10\5\0\12\10"+
    "\25\0\2\10\1\174\17\10\1\0\5\10\5\0\12\10"+
    "\25\0\1\10\1\175\20\10\1\0\5\10\5\0\1\10"+
    "\1\176\10\10\25\0\22\10\1\0\5\10\5\0\12\10"+
    "\25\0\7\10\1\177\12\10\1\0\5\10\5\0\12\10"+
    "\25\0\12\10\1\200\7\10\1\0\5\10\5\0\1\201"+
    "\11\10\25\0\22\10\1\0\5\10\5\0\1\10\1\202"+
    "\10\10\25\0\22\10\1\0\5\10\5\0\12\10\25\0"+
    "\12\10\1\203\7\10\1\0\5\10\5\0\12\10\25\0"+
    "\21\10\1\204\1\0\5\10\5\0\12\10\25\0\2\10"+
    "\1\205\17\10\1\0\5\10\5\0\12\10\25\0\2\10"+
    "\1\206\17\10\1\0\2\207\3\65\5\0\2\65\10\207"+
    "\25\0\22\65\1\0\2\171\3\65\5\0\2\65\4\171"+
    "\1\207\1\210\2\171\25\0\22\65\1\0\5\10\5\0"+
    "\12\10\25\0\3\10\1\211\16\10\1\0\5\10\5\0"+
    "\1\10\1\212\10\10\25\0\22\10\1\0\5\10\5\0"+
    "\12\10\25\0\11\10\1\213\10\10\1\0\5\10\5\0"+
    "\1\10\1\214\10\10\25\0\22\10\1\0\5\10\5\0"+
    "\12\10\25\0\20\10\1\215\1\10\1\0\5\10\5\0"+
    "\12\10\25\0\21\10\1\216\1\0\5\10\5\0\12\10"+
    "\25\0\5\10\1\217\14\10\1\0\5\10\5\0\12\10"+
    "\25\0\2\10\1\220\17\10\1\0\2\221\3\65\5\0"+
    "\2\65\10\221\25\0\22\65\1\0\2\207\3\65\5\0"+
    "\2\65\1\222\1\207\6\221\25\0\22\65\1\0\5\10"+
    "\5\0\1\10\1\223\10\10\25\0\22\10\1\0\5\10"+
    "\5\0\12\10\25\0\7\10\1\224\12\10\1\0\5\10"+
    "\5\0\12\10\25\0\14\10\1\225\5\10\1\0\5\10"+
    "\5\0\12\10\25\0\1\10\1\226\20\10\1\0\2\227"+
    "\3\65\5\0\2\65\10\227\25\0\22\65\1\0\2\221"+
    "\3\65\5\0\2\65\4\221\3\227\1\230\25\0\22\65"+
    "\1\0\5\10\5\0\12\10\25\0\2\10\1\231\17\10"+
    "\1\0\2\232\3\65\5\0\2\65\10\232\25\0\22\65"+
    "\1\0\2\227\3\65\5\0\2\65\2\227\1\232\1\233"+
    "\4\232\25\0\22\65\1\0\2\234\3\65\5\0\2\65"+
    "\10\234\25\0\22\65\1\0\2\232\3\65\5\0\2\65"+
    "\4\232\1\234\1\235\2\232\25\0\22\65";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\3\11\4\1\1\11\1\1\10\11"+
    "\1\1\4\11\17\1\1\11\1\1\2\11\1\1\1\11"+
    "\7\1\10\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private int minusRowLoc, minusColLoc;
  			
  	private StringBuffer curString = new StringBuffer();
  	
  	private int getLine() {return yyline+1;}
  	
  	private void setMinus(){
  			minusRowLoc = yyline;
  			minusColLoc = yycolumn;
  			}
  	
  	public boolean isMinus(){
  			return 	(minusRowLoc==yyline && minusColLoc==yycolumn - 1);
  			}
  	
  	private void setMinusForward(){
  			if (isMinus()) 
  			setMinus();
  			}	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws LexicalError {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalError(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws LexicalError {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException, LexicalError {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return new Token(sym.LB,getLine());
          }
        case 61: break;
        case 33: 
          { return new Token(sym.EQUAL,getLine());
          }
        case 62: break;
        case 43: 
          { return new Token(sym.THIS,getLine());
          }
        case 63: break;
        case 47: 
          { return new Token(sym.BREAK,getLine());
          }
        case 64: break;
        case 28: 
          { curString.append(yytext());
          }
        case 65: break;
        case 49: 
          { return new Token(sym.FALSE,getLine());
          }
        case 66: break;
        case 42: 
          { return new Token(sym.TRUE,getLine());
          }
        case 67: break;
        case 40: 
          { return new Token(sym.NEW,getLine());
          }
        case 68: break;
        case 27: 
          { throw new LexicalError(getLine(),"illegal literal inside a string: " + yytext());
          }
        case 69: break;
        case 34: 
          { return new Token(sym.GTE,getLine());
          }
        case 70: break;
        case 17: 
          { return new Token(sym.SEMI,getLine());
          }
        case 71: break;
        case 36: 
          { return new Token(sym.NEQUAL,getLine());
          }
        case 72: break;
        case 11: 
          { return new Token(sym.RP,getLine());
          }
        case 73: break;
        case 22: 
          { return new Token(sym.DOT,getLine());
          }
        case 74: break;
        case 37: 
          { return new Token(sym.LAND,getLine());
          }
        case 75: break;
        case 35: 
          { return new Token(sym.LTE,getLine());
          }
        case 76: break;
        case 13: 
          { return new Token(sym.RCBR,getLine());
          }
        case 77: break;
        case 50: 
          { return new Token(sym.WHILE,getLine());
          }
        case 78: break;
        case 26: 
          { yybegin(YYINITIAL);
          }
        case 79: break;
        case 58: 
          { return new Token(sym.CONTINUE,getLine());
          }
        case 80: break;
        case 15: 
          { return new Token(sym.RB,getLine());
          }
        case 81: break;
        case 48: 
          { return new Token(sym.CLASS,getLine());
          }
        case 82: break;
        case 20: 
          { return new Token(sym.PLUS,getLine());
          }
        case 83: break;
        case 4: 
          { return new Token(sym.CLASS_ID,getLine(),yytext());
          }
        case 84: break;
        case 2: 
          { return new Token(sym.INTEGER,getLine(),yytext());
          }
        case 85: break;
        case 21: 
          { return new Token(sym.MOD,getLine());
          }
        case 86: break;
        case 12: 
          { return new Token(sym.LCBR,getLine());
          }
        case 87: break;
        case 8: 
          { return new Token(sym.MULTIPLY,getLine());
          }
        case 88: break;
        case 29: 
          { curString.append(yytext());
		yybegin(YYINITIAL);
	 	return new Token(sym.QUOTE, getLine(), curString.toString());
          }
        case 89: break;
        case 19: 
          { setMinus();
	 	   return new Token(sym.MINUS,getLine());
          }
        case 90: break;
        case 44: 
          { return new Token(sym.NULL,getLine());
          }
        case 91: break;
        case 41: 
          { return new Token(sym.INT,getLine());
          }
        case 92: break;
        case 31: 
          { yybegin(MULTI_LINE_COMMENTS);
          }
        case 93: break;
        case 45: 
          { return new Token(sym.ELSE,getLine());
          }
        case 94: break;
        case 39: 
          { return new Token(sym.IF,getLine());
          }
        case 95: break;
        case 32: 
          { yybegin(SINGLE_LINE_COMMENTS);
          }
        case 96: break;
        case 51: 
          { return new Token(sym.RETURN,getLine());
          }
        case 97: break;
        case 24: 
          { return new Token(sym.LT,getLine());
          }
        case 98: break;
        case 16: 
          { return new Token(sym.COMMA,getLine());
          }
        case 99: break;
        case 57: 
          { return new Token(sym.INTEGER,getLine());
          }
        case 100: break;
        case 38: 
          { return new Token(sym.LOR,getLine());
          }
        case 101: break;
        case 1: 
          { throw new LexicalError(getLine(),"illegal character: " + yytext());
          }
        case 102: break;
        case 25: 
          { return new Token(sym.LNEG,getLine());
          }
        case 103: break;
        case 9: 
          { return new Token(sym.DIVIDE,getLine());
          }
        case 104: break;
        case 54: 
          { return new Token(sym.STATIC,getLine());
          }
        case 105: break;
        case 46: 
          { return new Token(sym.VOID,getLine());
          }
        case 106: break;
        case 6: 
          { setMinusForward();
          }
        case 107: break;
        case 53: 
          { return new Token(sym.STRING,getLine());
          }
        case 108: break;
        case 10: 
          { return new Token(sym.LP,getLine());
          }
        case 109: break;
        case 3: 
          { return new Token(sym.ID,getLine(),yytext());
          }
        case 110: break;
        case 60: 
          { if (isMinus()) {
	 						return new Token(sym.INTEGER,getLine(),yytext());
	 						}
	 				else{ 
	 				throw new LexicalError(getLine(),"Integer out of range: " + yytext());
        				}
          }
        case 111: break;
        case 55: 
          { return new Token(sym.BOOLEAN,getLine());
          }
        case 112: break;
        case 30: 
          { throw new LexicalError(getLine(),"bad input: " + yytext());
          }
        case 113: break;
        case 59: 
          { throw new LexicalError(getLine(),"Integer out of range: " + yytext());
          }
        case 114: break;
        case 7: 
          { curString.setLength(0);curString.append(yytext()); yybegin(QUOTE);
          }
        case 115: break;
        case 18: 
          { return new Token(sym.ASSIGN,getLine());
          }
        case 116: break;
        case 52: 
          { return new Token(sym.LENGTH,getLine());
          }
        case 117: break;
        case 23: 
          { return new Token(sym.GT,getLine());
          }
        case 118: break;
        case 56: 
          { return new Token(sym.EXTENDS,getLine());
          }
        case 119: break;
        case 5: 
          { 
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case QUOTE: {
              throw new LexicalError(getLine(),"Unclosed string");
            }
            case 158: break;
            case MULTI_LINE_COMMENTS: {
              throw new LexicalError(getLine(),"Unclosed comment");
            }
            case 159: break;
            default:
              {   	return new Token(sym.EOF,getLine());
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
