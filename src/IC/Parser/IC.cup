package IC.Parser;

import IC.AST.*;

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

nonterminal Program program;
nonterminal ICClass class;
nonterminal List<ICClass> class_list;

nonterminal Field	field;
nonterminal Method	method;
nonterminal Type	type;
nonterminal Formal formal;
nonterminal Statement statement;
nonterminal If ifStatement;


terminal Integer INTEGER;
terminal String  QUOTE;
terminal Boolean FALSE, TRUE;
terminal LENGTH, NEQUAL, EQUAL, RP, SEMI, DOT, LP, PLUS, MINUS, MULTIPLY, DIVIDE, GT, GTE, LT, LTE, LB, LCBR, RCBR, RB, LNEG, LAND, LOR, MOD, COMMA,
		ID, IF, ASSIGN, BREAK, CLASS, CLASS_ID, CONTINUE, EXTENDS, ELSE, NEW, RETURN, THIS, VOID, WHILE, EOF, STATIC;
terminal INT, STRING, BOOLEAN, UMINUS;
terminal null NULL;


//////////////////////////
// Precedence declarations

precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GTE, GT, LT, LTE;
precedence left MINUS, PLUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG; 
precedence left DOT, LP, RP, LB, RB;

//////////////
// The grammar

program ::= class_list:cl
      {: RESULT = new Program(getLine(), cl); :};

class_list ::= class:c {:
      	RESULT = new LinkedList<ICClass>(); RESULT.add(c);
      :}
      	| class_list:cl class:c
      {: cl.add(c); RESULT = cl; :}
;

class ::= CLASS CLASS_ID:name [EXTENDS CLASS_ID] LCBR (field | method)* RCBR
	{: RESULT = new ICClass(name.getLine(),name, fields, methods);	:};

field ::= type:t ID:id (COMMA ID)*:extras SEMI {: //ask dan how to handle (comma ID)*
		RESULT = new Field(t,id.getValue()); :}; |
 	type:t ID:id SEMI {:
 	 	RESULT = new Field(t,id.getValue()); :};
 	 	 
method ::=  STATIC (type|VOID):t ID:f LP [formals]:formals RP statementblock:st  {:
				RESULT = new StaticMethod(t,f.getValue(),formals, st); :}; |
			(type|VOID):t ID:f LP [formals]:formals RP statementblock:st  {:
				RESULT = new VirtualMethod(t,f.getValue(),formals, st); :}; 


type ::= INT | STRING | BOOLEAN

expr ::=	
			expr:e1 PLUS expr:e2 {: 
				RESULT = new MathBinaryOp(e1,+,e2); :}; |
			expr:e1 MINUS expr:e2 {:
				RESULT = new MathBinaryOp(e1,-,e2); :}; |
			expr:e1 MULT expr:e2 {: 
				RESULT = new MathBinaryOp(e1,*,e2); :}; |
			expr:e1 DIVIDE expr:e2 {:
				RESULT = new MathBinaryOp(e1,/,e2); :}; |
			expr:e1 MOD expr:e2 {:
				RESULT = new MathBinaryOp(e1,%,e2); :}; |
			expr:e1 LAND expr:e2 {: 
				RESULT = new LogicalBinaryOp(e1,&&,e2); :}; |
			expr:e1 LOR expr:e2 {: 
				RESULT = new LogicalBinaryOp(e1,||,e2); :}; |
			expr:e1 EQUAL expr:e2 {:
				RESULT = new MathBinaryOp(e1,==,e2); :}; |
			expr:e1 NEQUAL expr:e2 {:
				RESULT = new MathBinaryOp(e1,!=,e2); :}; |
			expr:e1 GT expr:e2 {: 
				RESULT = new MathBinaryOp(e1,>,e2); :}; |
			expr:e1 GTE expr:e2 {: 
				RESULT = new MathBinaryOp(e1,>=,e2); :}; |
			expr:e1 LT expr:e2 {:
				RESULT = new MathBinaryOp(e1,<,e2); :}; |
			expr:e1 LTE expr:e2 {:
				new MathBinaryOp(e1,<=,e2); :}; |
			expr:e1 LNEG expr:e2 {: 
				RESULT = new LogicalUnaryOp(!,e1); :}; |
			MINUS expr:e1 {:
				RESULT = new MathUnaryOp(-,e1); :}; |
			ID:f LP [exprlist]:args RP SEMI {:
				RESULT = new Call(f.getLine(),f.getValue(),args); :}; |
			ID:v {: 
				RESULT = new VariableLocation(v.getLine(),v.getValue()); :}; |
			ID:arr DOT LENGTH {:
				RESULT = new Length(arr); :} |
			INTEGER:i {:
				RESULT = new Literal(i.getLine(), INT); :}; | 
			QUOTE:str {:
				RESULT = new Literal(str.getLine(), STRING); :}; | :}; |
			LP expr:e1 RP {: RESULT = new ExpressionBlock(e1); :}; |
			THIS:id {: RESULT = new This(id.getLine()); :} ; |
			NEW:id CLASS_ID:name LP [exprlist] RP SEMI {: RESULT = new NewClass(id.getLine(),name); :} ; |
			NEW:id CLASS_ID:name LB expr:size RB SEMI {: RESULT = new NewArray(name,size); :} ; |
			location | 
			empty {: :}; 
						
exprlist ::= expr | expr COMMA exprlist

statement ::= 	IF LP expr:e RP statement:s ELSE statement:es {: 
					RESULT = new If(e,s,es):};  |
				WHILE LP expr:e RP statement:s {: 
					RESULT = new While(e,s):}; |
				BREAK:b SEMI {:
					RESULT = new Break(b.getLine()); :}; |
				CONTINUE SEMI {:
					RESULT = new Continue(b.getLine()); :}; |
				statementblock {::}; |
				RETURN expr:e SEMI {:
					RESULT = new Return(e.getLine(),e); :}; |
				RETURN:e SEMI {:
					RESULT = new Return(e.getLine()); :}; |
				ID:f LP exprlist:args RP SEMI {: 
					RESULT = new CallStatement(new Call(f.getLine(),f.getValue(),args)); :}; |
				type:t ID:id ASSIGN expr:e SEMI {: 
					LocalVariable = new LocalVariable(t,id.getValue());
					Location loc = new VariableLocation(id.getLine(),id.getValue());
					RESULT = new Assignment(loc,e) :} ; |
				type:t ID:id SEMI {:
					RESULT = new LocalVariable(t,id.getValue()); :}; |
				ID:id ASSIGN expr:e SEMI {:
					Location loc = new VariableLocation(id.getLine(),id.getValue());
					RESULT = new Assignment(loc,e);
				:} ; 
				
statementblock ::= LCBR:i statement*:lis RCBR {:
	RESULT = new StatementsBlock(i.getLine(),lis):};

literal ::= INTEGER | STRING | TRUE | FALSE | NULL
location ::=  ID | expr DOT ID | expr LB expr RB